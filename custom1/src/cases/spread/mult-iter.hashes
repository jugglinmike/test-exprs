/*---
desc: Spread operator following other arguments with a valid iterator
template: spread
features: [Symbol.iterator]
info: |
    12.3.6.1 Runtime Semantics: ArgumentListEvaluation

    ArgumentList : ... AssignmentExpression

    1. Let list be an empty List.
    2. Let spreadRef be the result of evaluating AssignmentExpression.
    3. Let spreadObj be GetValue(spreadRef).
    4. Let iterator be GetIterator(spreadObj).
    5. ReturnIfAbrupt(iterator).
    6. Repeat
       a. Let next be IteratorStep(iterator).
       b. ReturnIfAbrupt(next).
       c. If next is false, return list.
       d. Let nextArg be IteratorValue(next).
       e. ReturnIfAbrupt(nextArg).
       f. Append nextArg as the last element of list.
---*/

//# region setup {
var iter = {};
iter[Symbol.iterator] = function() {
  var callCount = 3;
  return {
    next: function() {
      callCount += 1;
      return { done: callCount === 6, value: callCount };
    }
  };
};
// }

//# region args {
1, 2, 3, ...iter
// }

//# region body {
assert.sameValue(arguments.length, 5);
assert.sameValue(arguments[0], 1);
assert.sameValue(arguments[1], 2);
assert.sameValue(arguments[2], 3);
assert.sameValue(arguments[3], 4);
assert.sameValue(arguments[4], 5);
// }
